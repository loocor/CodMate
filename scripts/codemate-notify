#!/bin/zsh
# CodMate â†’ macOS notification bridge for Codex CLI `notify` events
# Usage: codmate-notify '<JSON>'

set -euo pipefail

payload_json=${1:-""}
self_test_flag=${2:-""}
if [[ -z "$payload_json" ]]; then
  exit 0
fi

# Extract fields with Python (available by default on macOS)
python3 - "$payload_json" << 'PY' | while IFS=$'\t' read -r title message group_id; do
import json, sys, re
raw = sys.argv[1]
try:
    data = json.loads(raw)
except Exception:
    # fallback: raw passthrough (snippet)
    snippet = (raw or "").strip().replace("\n", " ")[:180]
    print("Codex", snippet if snippet else "Codex event", "codex-generic", sep='\t')
    sys.exit(0)

def norm(s: str) -> str:
    return re.sub(r"[^A-Za-z0-9]", "", s or "").lower()

evt = data.get("type") or data.get("event") or ""
evt_norm = norm(evt)

# Accept common variants for a completed turn/run
allowed = {
    "agentturncomplete", "turncomplete", "agentcompleted", "agentdone",
    "runcomplete", "rundone", "sessioncomplete", "completed",
}

if evt_norm not in allowed:
    # Only emit on explicit end-of-turn events to avoid multi-notify
    sys.exit(0)

assistant = data.get("last-assistant-message") or data.get("assistant") or data.get("message") or ""
msg = str(assistant)
# Normalize whitespace and limit length
msg = re.sub(r"\s+", " ", msg).strip()
if not msg:
    msg = "Codex turn complete"

thread_id = data.get("thread-id") or data.get("session-id") or "codex-thread"
print("Codex", (str(msg)[:240] if msg else "Codex"), f"codex-{thread_id}", sep='\t')
PY
  if command -v terminal-notifier >/dev/null 2>&1; then
    # Use terminal-notifier ONLY when we can attribute to CodMate bundle.
    # Otherwise, fall back to osascript to avoid a clickable "Show/Open" action
    # that could open Script Editor/Terminal.
    BUNDLE_ID="ai.codmate.app"
    if /usr/bin/osascript -e 'id of app id "'"$BUNDLE_ID"'"' >/dev/null 2>&1; then
      terminal-notifier -title "$title" -message "$message" -group "$group_id" -ignoreDnD -sender "$BUNDLE_ID" -actions "Dismiss" -closeLabel "Close"
    else
      USE_OSASCRIPT_FALLBACK=1
    fi
  else
    USE_OSASCRIPT_FALLBACK=1
  fi
  if [[ "${USE_OSASCRIPT_FALLBACK:-}" == 1 ]]; then
    # Fallback to osascript (less capable, but ubiquitous)
    # Use robust escaping for AppleScript string literals
    /usr/bin/osascript <<OSA
display notification "$(echo "$message" | sed 's/\\\\/\\\\\\\\/g; s/\"/\\\"/g')" with title "$(echo "$title" | sed 's/\\\\/\\\\\\\\/g; s/\"/\\\"/g')"
OSA
  fi
  if [[ "$self_test_flag" == "--self-test" ]]; then
    echo "__CODMATE_NOTIFIED__"
  fi
done
